buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:1.5.0"
    }
}

// Adds 'assemble', 'check', 'build', and 'clean' tasks.
// See: https://docs.gradle.org/current/userguide/standard_plugins.html#sec:base_plugins
apply plugin: 'base'

apply plugin: 'com.github.jruby-gradle.base'

dependencies {
    jrubyExec 'rubygems:jekyll:3.4.0'
    // Without this, we get: LoadError: no such file to load -- bundler
    jrubyExec 'rubygems:bundler:1.14.4'
}

ext {
    source = file("src/public/userguide/").absolutePath
    destination = file("build/_site").absolutePath
    
    commonFlags = [ '--source', source, '--destination', destination ]
}

import com.github.jrubygradle.JRubyExec
import edu.ucar.build.publishing.DeleteFromNexusTask
import edu.ucar.build.publishing.PublishToRawRepoTask

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.


task jekyllBuild(type: JRubyExec, group: 'Jekyll', description: 'Build your site.') {
    // Enable task to be UP-TO-DATE.
    inputs.file source
    outputs.file destination
    
    script "jekyll"
    
    scriptArgs "build"
    scriptArgs commonFlags
    
    // Consider enabling this to help us determine when pages need to be pushed to Nexus.
    // A copy of .jekyll-metadata could be stored in the repo and then compared to the local file.
    // See https://jekyllrb.com/docs/configuration/#incremental-regeneration
    // scriptArgs "--incremental"
}

tasks.assemble.dependsOn tasks.jekyllBuild

task jekyllServe(type: JRubyExec, group: 'Jekyll', description: 'Serve your site locally.') {
    // This task starts a server; it is never considered UP-TO-DATE.
    outputs.upToDateWhen { false }
    
    script "jekyll"
    
    scriptArgs "serve"
    scriptArgs commonFlags
}


task publish(type: PublishToRawRepoTask) {
    host = "https://artifacts.unidata.ucar.edu/"
    repoName = "thredds-doc"

    srcFile = file('website/')
    destPath = version
    
    // Disable this task until new thredds docs are ready to go.
    enabled = false
}

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteFromNexus(type: DeleteFromNexusTask) {
    host = "https://artifacts.unidata.ucar.edu/"
    searchQueryParameters.repository = 'thredds-doc'
    searchQueryParameters.q = '*'  // Nuke everything in the repo.
}

// The above tasks require credentials for our Nexus server, which they look for in Gradle properties.
// If those properties (i.e. NEXUS_USERNAME_KEY and NEXUS_PASSWORD_KEY) haven't been provided, the build will fail.
// Therefore, we only want to configure the credentials when one of the above tasks is part of the execution plan.
// Otherwise, unavailable credentials could cause a build to fail even if we aren't doing anything that interacts
// with Nexus. The TaskExecutionGraph allows us to do that.
gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    Collection<Task> nexusTasks = taskGraph.allTasks.findAll {
        it instanceof PublishToRawRepoTask || it instanceof DeleteFromNexusTask }
    
    nexusTasks.each {
        it.username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        it.password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    }
}
