if (name != "thredds") {
    throw new GradleException("This script plugin should only be applied to the root project, not '$name'.")
}

apply plugin: 'maven-publish'

import edu.ucar.build.PublishingUtil
import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact

publishing {
    publications {
        // Publish all artifacts we've added to the "archives" configuration of the root project. See fatJars.gradle.
        rootProject.configurations.archives.allArtifacts.each {
            if (it instanceof ArchivePublishArtifact) {
                AbstractArchiveTask task = (it as ArchivePublishArtifact).archiveTask
                
                "$task.baseName"(MavenPublication) {
                    artifactId task.baseName
                    artifact task
                }
            }
        }
        
        threddsParent(MavenPublication) {  // Maven BOM publication
            artifactId 'thredds-parent'
            
            pom.withXml{
                List<Project> publishedProjects = allprojects*.findAll { it.plugins.withType(MavenPublishPlugin) }
                List<MavenPublication> allPubs = publishedProjects.publishing.publications.flatten()
                List<MavenPublication> webAndJavaPubs = allPubs.findAll {
                    // Don't include threddsParent or any of the fatJar pubs in dependencyManagement.
                    it.name.contains('Web') || it.name.contains('Java')
                }
                
                asNode().append PublishingUtil.createDependencyManagement(webAndJavaPubs)
            }
        }
    }
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    // This won't find any publishToMavenLocal tasks. Those are of type PublishToMavenLocal
    Collection<Task> mavenPublishTasks = taskGraph.allTasks.findAll { it instanceof PublishToMavenRepository }
    
    if (!mavenPublishTasks) {
        return  // We're not running any tasks that publish to a (remote) Maven repo.
    }
    
    Closure nexusCredentials = {
        username = getPropertyOrFailBuild 'nexus.username'
        password = getPropertyOrFailBuild 'nexus.password'
    }
    
    mavenPublishTasks.each {
        it.repository.credentials nexusCredentials
    }
}

String getPropertyOrFailBuild(String key) {
    if (!rootProject.hasProperty(key)) {
        throw new GradleException("You must define the '$key' property in order to publish to Nexus.")
    } else {
        rootProject.property(key) as String
    }
}
